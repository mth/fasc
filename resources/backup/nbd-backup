#!/bin/sh

set -e

case "$1" in
	sync|mkfs|mount|unmount) ;;
	*)
	  [ "$1" = "help" ] || { echo "Unknown command ($1)"; echo; }
cat <<HELP
nbd-backup sync
  Updates remote backup snapshot to the current filesystem data.

nbd-backup mkfs
  Setups dmcrypt and creates new filesystem on the remote image.

nbd-backup mount
  Mounts backup filesystem and quits

nbd-backup unmount
  Unmounts backup device
HELP
		[ "$1" = "help" ]
		exit 0
		;;
esac

error() {
	echo "$1" >&2
	exit 1
}

unset CRYPTSETUP_KEY BACKUP_HOST
BACKUP_TARGET_DIR='/media/backup-storage'
BACKUP_MOUNT_OPTIONS='nobarrier,noatime,journal_checksum'
BACKUP_DIRS='/root /etc /var /usr/local /home /opt /srv'
EXCLUDE_DIRS='/dev /media /mnt /proc /run /sys /tmp /var/tmp'
CRYPT_DEVICE='backup'
NBD_SOCKET='/run/nbd-backup/socket'
NBD_DEVICE='/dev/nbd7'
NBD_BACKUP_NAME='backup-storage'
RSYNC_COMMAND=/usr/bin/rsync
RSYNC_OPTIONS='--stats --del --numeric-ids -aHSx'
RSYNC_BACKUP_NOTICE='/var/backups/sbackup.finished'

[ -f /etc/backup/nbd-backup.conf ] || error 'missing /etc/backup/nbd-backup.conf'
. /etc/backup/nbd-backup.conf

[ -d "$BACKUP_TARGET_DIR" ] \
	|| error "Missing BACKUP_TARGET_DIR ($BACKUP_TARGET_DIR)"
[ -f "$CRYPTSETUP_KEY" ] \
	|| error "Key '$CRYPTSETUP_KEY' is unavailable (CRYPTSETUP_KEY)"
[ -n "$BACKUP_HOST" ] \
	|| error "BACKUP_HOST is not set"

export PATH HOME LANG
unset LD_PRELOAD

COMMAND="$1"
CLEANUP_UMOUNT=true
CLEANUP_CRYPT=true
CLEANUP_NBD_CLIENT=true
CLEANUP_SSH_PID=0

cleanup_on_exit() {
        $CLEANUP_UMOUNT "$BACKUP_TARGET_DIR"
	sync
	sleep 1
	$CLEANUP_CRYPT remove "$CRYPT_DEVICE"
	sync
	sleep 1
	$CLEANUP_NBD_CLIENT -d "$NBD_DEVICE"
	kill "$CLEANUP_SSH_PID"
}

# Ensure that the backup is unmounted
while umount "$BACKUP_TARGET_DIR" 2>/dev/null; do
        echo "$BACKUP_TARGET_DIR was mounted!" >&2
done

[ -z "$(ss -xlH src $NBD_SOCKET)" ] \
	|| error "$NBD_SOCKET is active, backup seems to be already in progress?" 

! grep " $BACKUP_TARGET_DIR " /proc/mounts \
	|| error "Could not unmount $BACKUP_TARGET_DIR, exiting!"

# Ensure that the cryptsetup device is inactive
! cryptsetup remove "$CRYPT_DEVICE" >&2 \
	|| echo "backup mapper $CRYPT_DEVICE was active" >&2

! nbd-client -d "$NBD_DEVICE" 2>/dev/null || echo "$NBD_DEVICE was active" >&2

[ "$COMMAND" != "unmount" ] || exit 0

NBD_SOCKET_DIR="$(dirname $NBD_SOCKET)"
rm -f "$NBD_SOCKET"
mkdir -p "$NBD_SOCKET_DIR"
ssh "-L$NBD_SOCKET:/socket" -N "$BACKUP_HOST" &

CLEANUP_SSH_PID=$!
trap cleanup_on_exit EXIT

wait_for_nbd_socket() {
	for i in 0 1 2 3 4 5 6 7 8 9; do
		sleep 1
		[ -z "$(ss -xlH src $NBD_SOCKET)" ] || return 0
	done
	error "Could not get $NBD_SOCKET"
}

wait_for_nbd_socket

nbd-client -unix "$NBD_SOCKET" "$NBD_DEVICE" -name "$NBD_BACKUP_NAME" \
	|| error "Could not setup $NBD_DEVICE for $NBD_SOCKET"
CLEANUP_NBD_CLIENT=nbd-client

[ "$COMMAND" != "mkfs" ] || cryptsetup luksFormat "$NBD_DEVICE" "$CRYPTSETUP_KEY" \
  || error "Could not format dm-crypt device $NBD_DEVICE"

cryptsetup open -d "$CRYPTSETUP_KEY" "$NBD_DEVICE" "$CRYPT_DEVICE" \
	|| error "Could not create dm-crypt mapper"
CLEANUP_CRYPT=cryptsetup

if [ "$COMMAND" = "mkfs" ]; then
  mkfs.ext4 "/dev/mapper/$CRYPT_DEVICE"
  exit 0
fi

set +e
e2fsck -y "/dev/mapper/$CRYPT_DEVICE"
FSCK_ERR=$?
[ $FSCK_ERR -le 2 ] || error "Backup fsck failed with exit code $FSCK_ERR."
set -e

mount -t ext4 -o "$BACKUP_MOUNT_OPTIONS" \
	"/dev/mapper/$CRYPT_DEVICE" "$BACKUP_TARGET_DIR"

if [ "$COMMAND" = "mount" ]; then
	trap - EXIT
	exit 0
fi

CLEANUP_UMOUNT=umount

do_rsync() {
  echo
  echo "Starting $1 backup."
  date
  /bin/mkdir -p "$BACKUP_TARGET_DIR$1"
  RS_XTRA_OPTS="$RSYNC_OPTIONS --exclude=$1/lost+found"
  for RS_EXCLUDE_DIR in $EXCLUDE_DIRS; do
    case "$RS_EXCLUDE_DIR" in
    "$1"*) RS_XTRA_OPTS="$RS_XTRA_OPTS --exclude=$RS_EXCLUDE_DIR";;
    esac
  done
  if "$RSYNC_COMMAND" $RS_XTRA_OPTS "$1" "$BACKUP_TARGET_DIR/`dirname "$1"`/"
  then echo "$1 backup done."
  else echo "$1 backup failed with $?."
  fi
}

for CUR_BACKUP_DIR in $BACKUP_DIRS; do
  do_rsync "$CUR_BACKUP_DIR"
done

/sbin/fstrim "$BACKUP_TARGET_DIR" || echo "fstrim $BACKUP_TARGET_DIR failed."
/bin/sync
echo 'All backup done.'
/bin/date '+%Y-%m-%dT%H:%M:%S' > "$RSYNC_BACKUP_NOTICE"
